---
import { getLangFromUrl, useTranslatedPath, useTranslations } from '../../../i18n/utils';
import { getSessions, type SessionInfo } from '../../../scripts/api/sessionize_api';
import AddToCalendar from '../../Common/AddToCalendar.astro';
import BaseLayout from '../../Common/BaseLayout.astro';
import SessionTopic from '../SessionTopic.astro';

interface Props {
  entry: SessionInfo;
}

export async function getSessionSlugPaths() {
  const sessions = await getSessions(true);
  return sessions.map((entry) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const getPath = useTranslatedPath(lang);

// 2. When it's time to render, you can get the entry directly from the prop
const { entry } = Astro.props;

const dateStart = new Date(entry.startsAt);
const dateEnd = new Date(entry.endsAt);

const isScheduled = dateStart.getTime() != 0;

var date = dateStart.toLocaleDateString("en-US", {
  day: "numeric",
  month: "short",
});

const start = dateStart.toLocaleTimeString("en-US", {
  hour: "numeric",
  minute: "numeric",
});

const end = dateEnd.toLocaleTimeString("en-US", {
  hour: "numeric",
  minute: "numeric",
});

function formatDate(date: Date) {
  const year = date.getUTCFullYear();
  const month = date.getUTCMonth() + 1;
  const day = date.getUTCDate();
  const hours = date.getUTCHours();
  const minutes = date.getUTCMinutes();

  return `${year}${month}${day > 9 ? day : "0" + day}T${
    hours > 9 ? hours : "0" + hours
  }${minutes > 9 ? minutes : "0" + minutes}00Z`;
}

const pageTitle = entry.title;
const pageDesc = entry.description;
---

<BaseLayout
  pageUiTitle={t("session.detailTitle")}
  pageTitle={pageTitle}
  pageDescription={pageDesc}
>
  <div class="text-white">
    <div
    class="flex flex-row md:justify-between md:items-center gap-2 mb-6 text-white justify-center items-center"
  >
    <h2 class="text-4xl mb-3">{entry.title}</h2>

    {
      isScheduled && (
        <AddToCalendar
          dateStart={dateStart}
          dateEnd={dateEnd}
          sessionDetails={`Speaker: ${entry.speakers?.map((ele) => ele.fullName).join(", ")} \nTopics: ${entry.topics.join(" ")}\n\n${entry.description}`}
          sessionTitle={entry.title}
          sessionLocation={entry.room??t("sessions.toBeAnnunced")}
        />
      )
    }
  </div>
  <div class="flex flex-wrap gap-2 mb-6">
    <div class="py-1 px-2 rounded-md bg-red text-white flex items-center">
      <span class="text-sm">{entry.sessionLevel}</span>
    </div>

    {entry.topics.map((t) => <SessionTopic brightness="dark" topic={t} />)}
  </div>
  <div class="mb-6">
    <p class="text-lg">{entry.room}</p>
    {
      isScheduled && (
        <p class="text-lg">
          {date}, {start} - {end}
        </p>
      )
    }
  </div>

  <p style="white-space: pre-wrap;">{entry.description}</p>

  <div class="mt-10">
    <p class="text-3xl mb-6">{t("session.speakers")}</p>
    {
      entry.speakers?.map((speaker) => (
        <a
          href={getPath(`/speakers/${speaker.slug}`)}
          class="flex md:flex-row flex-col items-center mb-6"
        >
          <div class="flex-none w-24 mb-2">
            <img
              src={speaker.profilePicture}
              alt={speaker.fullName}
              class="rounded-full"
            />
          </div>
          <div class="flex-1 pl-6 flex flex-col md:items-start items-center">
            <h2 class="text-4xl mb-1">{speaker.fullName}</h2>
            <p class="text-lg mb-3">{speaker.tagLine}</p>
          </div>
        </a>
      ))
    }
  </div>
  </div>
</BaseLayout>